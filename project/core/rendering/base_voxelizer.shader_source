render_states = {
	voxelize = {
		inherits = "default"
		states = {
			cull_mode = "cull_none"
			z_enable = "false"
			write_mask0 = "0x0"
			write_mask1 = "0x0"
			write_mask2 = "0x0"
			write_mask3 = "0x0"			
		}		
	}
}

hlsl_shaders = {
	base_voxelize = {
		includes = [ "common", "skinning", "vegetation_bending" ]
		
		samplers = {
		}	
		
		compiler_options = {
			D3D11 = {
				pixel_shader = {					
					instruction_set = "ps_5_0"
				}				
			}
		}
		
		code="""		
			RWTexture3D<float4> voxels;
			
			struct VS_INPUT {
				float4 position : POSITION;
				float3 normal : NORMAL;
			};
			
			struct PS_INPUT {
				float4 position : SV_POSITION;
				float3 normal : TEXCOORD0;
				float depth : TEXCOORD1;
				uint proj_axis : TEXCOORD2;
				float4 aabb : TEXCOORD3;
				float4 plane : TEXCOORD4;
				float4 clip_space : TEXCOORD5;
				float2 delta : TEXCOORD6;
			};
			struct GS_INPUT {
				float4 position : SV_POSITION;
				float3 normal : TEXCOORD0;
				float3 voxel_origo : TEXCOORD1;
			};
			
			CBUFFER_START(c0)
				float4x4 world;				
				float4x4 observer;
			CBUFFER_END
			
			static float near_range = 0; //.1;				
			static const float3 min_scene = float3(-25.6,-25.6,-25.6);
			static const float3 max_scene = float3(25.6,25.6,25.6);
			
			#define VOXEL_RES 256.f
			
			GS_INPUT vs_main(VS_INPUT input) {				
				GS_INPUT o;				
				
				float4 p = mul(input.position, world);
				
				float3 scene_size = (max_scene - min_scene);
				float3 texel_size = (scene_size / VOXEL_RES) * 32;
				float3 voxel_origo = observer._m30_m31_m32; // + observer._m10_m11_m12 * 0.15 * scene_size; 
				
				
				voxel_origo -= fmod(voxel_origo, texel_size);
				
				p.xyz -= voxel_origo;
				o.voxel_origo = voxel_origo;
				o.position = p;
				o.normal = mul(input.normal, (float3x3)world);				
				
				return o;
			}		
		
			int determine_projection_axis(float3 tri_normal) {
				tri_normal = abs(tri_normal);
				return (tri_normal.x > tri_normal.y && tri_normal.x > tri_normal.z) ? 0 : (tri_normal.y > tri_normal.z) ? 1 : 2;
			}
			
			float4x4 calc_projection(int projection_axis) {
				float3 max_s = max_scene.xyz;
				float3 min_s = min_scene.xyz;
				
				float2 s = 2.f / (max_s.xy - min_s.xy);
				float2 t = -((max_s.xy + min_s.xy) / (max_s.xy - min_s.xy));
				float sz = 1.f / (max_s.z - min_s.z);
				float tz = 0; //-(near_range / ((max_s.z - min_s.z) + near_range));				
				
				if (projection_axis == 0) 
					return float4x4(
						0,0,sz,tz,
						0,s.y,0,t.y,
						s.x,0,0, t.x,
						0,0,0,1					
					);
				else if (projection_axis == 1)
					return float4x4(
						s.x,0,0, t.x,
						0,0,sz, tz,
						0,-s.y,0, t.y,
						0,0,0,1
					);					
				else
					return float4x4(
						s.x,0,0,t.x,
						0,s.y,0,t.y,
						0,0,sz, tz,
						0,0,0,1
					);
			}
			
			#define FLT_MAX 3.402823466e+38F
			
			[maxvertexcount(3)]
			void gs_main(triangle GS_INPUT input[3], inout TriangleStream<PS_INPUT> output) {
				PS_INPUT o[3];								
				
				float3 tri_normal = cross(normalize(input[0].position - input[1].position), normalize(input[0].position - input[2].position));
				uint proj_axis = determine_projection_axis(tri_normal);
				
				float4x4 proj = calc_projection(proj_axis);
				
				float3 offset_multiplier = proj_axis == 0 ? float3(1,0,0) : proj_axis == 1 ? float3(0,1,0) : float3(0,0,1);
				float4 offset = float4(-min_scene * offset_multiplier, 0);

				float2 sp[3];
				float4 p[3];				
				
				[unroll]
				for (int v = 0; v < 3; ++v) {
					float4 pos = input[v].position + offset;
					p[v] = mul(pos, proj);
					o[v].depth = p[v].z;

					sp[v] = (p[v].xy / abs(p[v].w)) * float2(1,-1);
					
					o[v].normal = input[v].normal;
					o[v].proj_axis = proj_axis;
				}

				float2 half_pixel = 1.f / VOXEL_RES;

				// Calc triangle AABB, increase size by 1 pixel to account for conservative rasterization
				float4 aabb;
				aabb.xy = min(sp[0], sp[1]);
				aabb.xy = min(aabb.xy, sp[2]);		
				aabb.zw = max(sp[0], sp[1]);
				aabb.zw = max(aabb.zw, sp[2]);
				aabb = saturate(aabb * 0.5 + 0.5) * (VOXEL_RES-1);
				aabb.xy -= 0.5f;
				aabb.zw += 0.5f;
				
				
				//aabb += float4(-half_pixel, half_pixel);
				
				float3 planes[2];
				
				float2 e0 = sp[2]-sp[0];
				float2 e1 = sp[2]-sp[1];
				bool back_side = (e0.x*e1.y-e1.x*e0.y)<0;
				float back_side_flip = back_side ? 1 : -1;
				
				float4 plane = float4( normalize(cross( p[1].xyw-p[0].xyw, p[2].xyw-p[0].xyw )), 0);
				plane.w = -dot(plane.xyz,p[0].xyw);
				
				float3 current_pos, prev_pos, next_pos;
				[unroll]
				for (uint v=0; v<3; ++v) {
					o[v].aabb = aabb;
					
					current_pos = p[v].xyw;
					prev_pos = p[(v+2)%3].xyw;
					next_pos = p[(v+1)%3].xyw;						
				
					planes[0] = cross(current_pos - prev_pos, prev_pos);
					planes[1] = cross(next_pos - current_pos, current_pos);
					planes[0].z -= dot(half_pixel.xy, abs(planes[0].xy)) * back_side_flip;
					planes[1].z -= dot(half_pixel.xy, abs(planes[1].xy)) * back_side_flip;
					
					float3 new_pos = back_side ? cross(planes[0], planes[1]) : cross(planes[1], planes[0]);
					new_pos.xy /= abs(new_pos.z);
					o[v].position = float4(new_pos.xy, p[v].zw);
					//new_pos /= abs(new_pos.z);
					//o[v].position = float4(new_pos.xy, 1, new_pos.z);
											
					//o[v].position = p[v];
					o[v].clip_space = float4(o[v].position.xy, 1, new_pos.z);
					o[v].plane = plane;
					o[v].delta = 0.5*sign(plane.xy);
					output.Append(o[v]);
				}
			}		
			
			
			void ps_main(PS_INPUT input) {
				float3 p = input.position;
				input.depth *= VOXEL_RES;
				float4 color = float4(1,1,1,1); //float4(encode_signed_normal(input.normal), 1);			
				
				float2 clip_mask = (p.xy >= input.aabb.xy) * (p.xy <= input.aabb.zw);
				if (dot(clip_mask,clip_mask) != 2)
					discard;				
				
				int x = (input.proj_axis == 1 || input.proj_axis == 2) ? p.x : input.depth;
				int y = (input.proj_axis == 0 || input.proj_axis == 2) ? p.y : VOXEL_RES - input.depth;
				int z = input.proj_axis == 0 ? p.x : input.proj_axis == 1 ? p.y : input.depth;		
				
				float d = max(abs(ddy(input.depth)), abs(ddx(input.depth)));
				
				if (d >= 0.5) {
					if (input.proj_axis == 0) {
						for (int i = -1; i != 1; ++i)
							voxels[uint3(x+i,y,z)] =  color;
					} else if (input.proj_axis == 1) {
						for (int i = -1; i != 1; ++i)
							voxels[uint3(x,y+i,z)] = color;
					} else {
						for (int i = -1; i != 1; ++i)
							voxels[uint3(x,y,z+i)] = color; //float4(1,1,1,1);
					}
				} else 
					voxels[uint3(x,y,z)] = color; // float4(encode_signed_normal(input.normal), 1);
					
			}	
		"""
	}
	
}